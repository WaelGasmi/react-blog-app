// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(cuid())
  firstName String
  lastName  String
  email     String @unique
  password  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Post    Post[]
  Comment Comment[]
}

model Post {
  id      String @id @default(cuid())
  title   String
  like    Int    @default(0)
  dislike Int    @default(0)
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
}

model Comment {
  id      String @id @default(cuid())
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  postId    String
  commentId String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  parent  Comment?  @relation("CommentReplies", fields: [commentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentReplies")
}

model CommentReaction {
  id      String  @id @default(cuid())
  like    Boolean @default(false)
  dislike Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  commentId String

  @@unique([commentId, userId])
}

model PostReaction {
  id      String  @id @default(cuid())
  like    Boolean @default(false)
  dislike Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  postId String

  @@unique([postId, userId])
}
